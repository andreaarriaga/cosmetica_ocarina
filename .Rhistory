# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
# ingredientes
precio_ingredientes <- precio_recetas[precio_recetas$categoria == "ingrediente",]
# precio por receta realizada (en la bitacora)
precio_ingredientes <- bitacora %>% left_join(precio_ingredientes)
precio_ingredientes$precio_ingrediente <- precio_ingredientes$cantidad * precio_ingredientes$proporcion * precio_ingredientes$precio_u
precio_por_receta <- aggregate(precio_ingrediente ~ lote + receta + cantidad, FUN = sum, data = precio_ingredientes)
names(precio_por_receta)[names(precio_por_receta) == "precio_ingrediente"] <- "precio_lote"
precio_por_receta$precio_gramo <- precio_por_receta$precio_receta/precio_por_receta$cantidad
precio_por_receta$precio_gramo <- precio_por_receta$precio_lote/precio_por_receta$cantidad
View(precio_por_receta)
View(precio_recetas)
# precio por ingrediente segun la cantidad usada
precio_lotes <- bitacora %>% left_join(precio_recetas)
# empaque y venta
precio_ingredientes <- precio_recetas[!precio_recetas$categoria == "ingrediente",]
# empaque y venta
precio_empaque <- precio_recetas[!precio_recetas$categoria == "ingrediente",]
# ingredientes
precio_ingredientes <- precio_recetas[precio_recetas$categoria == "ingrediente",]
precio_ingredientes$precio_ingrediente <- precio_ingredientes$cantidad * precio_ingredientes$proporcion * precio_ingredientes$precio_u
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_lotes <- bitacora %>% left_join(precio_recetas)
# ingredientes
precio_ingredientes <- precio_recetas[precio_recetas$categoria == "ingrediente",]
precio_ingredientes$precio_ingrediente <- precio_ingredientes$cantidad * precio_ingredientes$proporcion * precio_ingredientes$precio_u
precio_receta_ingredientes <- aggregate(precio_ingrediente ~ lote + receta + cantidad, FUN = sum, data = precio_ingredientes)
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_lotes <- bitacora %>% left_join(precio_recetas)
View(precio_recetas)
# ingredientes
precio_ingredientes <- precio_recetas[precio_recetas$categoria == "ingrediente",]
precio_ingredientes$precio_ingrediente <- precio_ingredientes$cantidad * precio_ingredientes$proporcion * precio_ingredientes$precio_u
View(precio_ingredientes)
# ingredientes
precio_ingredientes <- precio_lotes[precio_lotes$categoria == "ingrediente",]
precio_ingredientes$precio_ingrediente <- precio_ingredientes$cantidad * precio_ingredientes$proporcion * precio_ingredientes$precio_u
precio_receta_ingredientes <- aggregate(precio_ingrediente ~ lote + receta + cantidad, FUN = sum, data = precio_ingredientes)
names(precio_receta_ingredientes)[names(precio_receta_ingredientes) == "precio_ingrediente"] <- "precio_lote"
precio_receta_ingredientes$precio_gramo <- precio_receta_ingredientes$precio_lote/precio_receta_ingredientes$cantidad
# empaque y venta
precio_empaque <- precio_lotes[!precio_lotes$categoria == "ingrediente",]
View(precio_empaque)
precio_ingredientes %>% names
precio_empaque %>% names
precio_empaque$precio_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_empaque)
aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_empaque)
precio_empaque$precio_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_empaque)[4]
View(precio_empaque)
# empaque y venta
precio_empaque <- precio_lotes[!precio_lotes$categoria == "ingrediente", ]
precio_empaque$precio_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_empaque)[4]
names(precio_empaque)[names(precio_empaque) == "precio_u"] <- "precio"
# calculando el precio total de cada lote
precio_receta_ingredientes <- aggregate(precio_ingrediente ~ lote + receta + cantidad, FUN = sum, data = precio_ingredientes)
names(precio_receta_ingredientes)[names(precio_receta_ingredientes) == "precio_ingrediente"] <- "precio"
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
# precio por ingrediente segun la cantidad usada
precio_lotes <- bitacora %>% left_join(precio_recetas)
precio_ingredientes <- precio_lotes[precio_lotes$categoria == "ingrediente",]
precio_ingredientes$precio_ingrediente <- precio_ingredientes$cantidad * precio_ingredientes$proporcion * precio_ingredientes$precio_u
View(precio_lotes)
View(precio_ingredientes)
precio_ingredientes%>% str()
precio_ingredientes$precio_u %<>% as.numeric()
precio_ingredientes$precio_ingrediente <- precio_ingredientes$cantidad * precio_ingredientes$proporcion * precio_ingredientes$precio_u
# calculando el precio total de los ingredientes de cada lote
precio_lote_ingredientes <- aggregate(precio_ingrediente ~ lote + receta + cantidad, FUN = sum, data = precio_ingredientes)
names(precio_lote_ingredientes)[names(precio_lote_ingredientes) == "precio_ingrediente"] <- "precio"
# empaque y venta
precio_lote_empaque <- precio_lotes[!precio_lotes$categoria == "ingrediente", ]
precio_lote_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_lote_empaque)
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_lote_empaque)
names(precio_lote_empaque)[names(precio_lote_empaque) == "precio_u"] <- "precio"
# uniendo el precio de los ingredientes con los empaques y otros
precio_lote_ingredientes %<>% rbind(precio_lote_empaque)
View(precio_lote_ingredientes)
precio_lote <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote)
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_lote_ingredientes <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_lote_ingredientes[precio_lote_ingredientes$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$proporcion * precio_lote_ingredientes$precio_u
# calculando el precio total de los ingredientes de cada lote
precio_lote_ingredientes <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote_ingredientes)
# empaque y otros
precio_lote_empaque <- precio_lotes[!precio_lotes$categoria == "ingrediente", ]
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_articulos_bitacora[precio_articulos_bitacora$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$proporcion * precio_lote_ingredientes$precio_u
# calculando el precio total de los ingredientes de cada lote
precio_lote_ingredientes <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote_ingredientes)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_lote_empaque)
names(precio_lote_empaque)[names(precio_lote_empaque) == "precio_u"] <- "precio"
# uniendo el precio de los ingredientes con los empaques y otros
precio_lote <- precio_lote_ingredientes %<>% rbind(precio_lote_empaque)
precio_lote <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote)
View(precio_lote)
# calculando el precio de cada gramo
precio_lote$precio_gramo <- precio_lote$precio_lote/precio_lote$cantidad
# calculando el precio de cada gramo
precio_lote$precio_gramo <- precio_lote$precio/precio_lote$cantidad
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_articulos_bitacora[precio_articulos_bitacora$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$proporcion * precio_lote_ingredientes$precio_u
# calculando el precio total de los ingredientes de cada lote
precio_lote_ingredientes <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote_ingredientes)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_lote_empaque)
names(precio_lote_empaque)[names(precio_lote_empaque) == "precio_u"] <- "precio"
# uniendo el precio de los ingredientes con los empaques y otros
precio_lote <- precio_lote_ingredientes %<>% rbind(precio_lote_empaque)
precio_lote <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote)
# calculando el precio de cada gramo
precio_lote$precio_gramo <- precio_lote$precio/precio_lote$cantidad
# generando base articulos_disponibles
# filtrando los agotados
articulos_totales <- articulos[!articulos$estado == "agotado",]
View(precio_articulos)
View(articulos_totales)
# generando base articulos_disponibles
# filtrando los agotados
articulos_disponibles <- articulos[!articulos$estado == "agotado",]
# sumando todo lo que hay por ingrediente
articulos_disponibles <- aggregate(cantidad ~ articulo, FUN = sum, data = articulos_disponibles)
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_articulos_bitacora[precio_articulos_bitacora$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$proporcion * precio_lote_ingredientes$precio_u
# calculando el precio total de los ingredientes de cada lote
precio_lote_ingredientes <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote_ingredientes)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque <- aggregate(precio_u ~ lote + receta + cantidad, FUN = sum, data = precio_lote_empaque)
names(precio_lote_empaque)[names(precio_lote_empaque) == "precio_u"] <- "precio"
# uniendo el precio de los ingredientes con los empaques y otros
precio_lote <- precio_lote_ingredientes %<>% rbind(precio_lote_empaque)
precio_lote <- aggregate(precio ~ lote + receta + cantidad, FUN = sum, data = precio_lote)
# calculando el precio de cada gramo
precio_lote$precio_gramo <- precio_lote$precio/precio_lote$cantidad
View(precio_lote)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_articulos_bitacora[precio_articulos_bitacora$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$dimension_lote * precio_lote_ingredientes$precio_u
View(precio_lote_ingredientes)
View(precio_articulos_bitacora)
View(precio_recetas)
View(bitacora)
View(precio_articulos_bitacora)
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_articulos_bitacora[precio_articulos_bitacora$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$dimension_lote * precio_lote_ingredientes$precio_u
View(precio_lote_ingredientes)
precio_lote_ingredientes %>% str()
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_articulos_bitacora[precio_articulos_bitacora$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$dimension_lote * precio_lote_ingredientes$precio_u
# calculando el precio total de los ingredientes de cada lote
precio_lote_ingredientes <- aggregate(precio ~ lote + receta + dimension_lote, FUN = sum, data = precio_lote_ingredientes)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque$precio <- precio_lote_empaque$dimension_lote * precio_lote_empaque$cantidad_productos * precio_lote_empaque$precio_u
# calculando el precio total de los empaques de cada lote
precio_lote_empaque <- aggregate(precio ~ lote + receta + dimension_lote, FUN = sum, data = precio_lote_empaque)
# calculando el precio total de los empaques de cada lote
precio_lote_empaque <- aggregate(precio ~ lote + receta + cantidad_producto, FUN = sum, data = precio_lote_empaque)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque$precio <- precio_lote_empaque$dimension_lote * precio_lote_empaque$cantidad_productos * precio_lote_empaque$precio_u
# calculando el precio total de los empaques de cada lote
precio_lote_empaque <- aggregate(precio ~ lote + receta + cantidad_producto, FUN = sum, data = precio_lote_empaque)
View(precio_lote_empaque)
# calculando el precio total de los empaques de cada lote
precio_lote_empaque <- aggregate(precio ~ lote + receta + cantidad_productos, FUN = sum, data = precio_lote_empaque)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque$precio <- precio_lote_empaque$dimension_lote * precio_lote_empaque$cantidad_productos * precio_lote_empaque$precio_u
# calculando el precio total de los empaques de cada lote
precio_lote_empaque <- aggregate(precio ~ lote + receta + dimension_lote, FUN = sum, data = precio_lote_empaque)
# uniendo el precio de los ingredientes con los empaques y otros
precio_lote <- precio_lote_ingredientes %<>% rbind(precio_lote_empaque)
precio_lote <- aggregate(precio ~ lote + receta + dimension_lote, FUN = sum, data = precio_lote)
View(precio_lote)
# uniendo el precio de los ingredientes con los empaques y otros
precio_lote <- precio_lote_ingredientes %<>% rbind(precio_lote_empaque)
View(precio_lote)
rm(list = ls())
# setup
library(readxl)
library(magrittr)
library(dplyr)
# setwd("/home/andrea/Documentos/cosmetica_ocarina") # Andre
# setwd("Documentos/cosmetica_ocarina") # Sebas
# .libPaths("D:/Rlib") # Sebas
# llamando los datos
raw_locale <- "data/raw/"
articulos <- read_excel(paste0(raw_locale, "Materias_primas.xlsx"), sheet = "articulos")
bitacora <- read_excel(paste0(raw_locale, "Bitacora.xlsx"))
recetas <- read_excel(paste0(raw_locale, "Recetas.xlsx"))
# definiendo la clase correcta para las columnas
bitacora$fecha %<>% as.Date()
# generando lista de precios de los articulos usados
# filtrando los articulos usados en la receta
precio_articulos <- articulos[articulos$articulo %in% recetas$articulo, ]
# seleccionando la fila que tiene el precio mas alto para cada ingrediente
precio_articulos <- aggregate(precio_u ~ articulo + categoria, FUN = max, data = precio_articulos)
# generando el precio para cada receta
# agregando a las recetas el precio por unidad de cada articulo
precio_recetas <- recetas %>% left_join(precio_articulos)
precio_recetas$precio_u %<>% as.numeric()
# precio por ingrediente segun la cantidad usada
precio_articulos_bitacora <- bitacora %>% left_join(precio_recetas)
precio_lote_ingredientes <- precio_articulos_bitacora[precio_articulos_bitacora$categoria == "ingrediente",]
precio_lote_ingredientes$precio_u %<>% as.numeric()
precio_lote_ingredientes$precio <- precio_lote_ingredientes$cantidad * precio_lote_ingredientes$dimension_lote * precio_lote_ingredientes$precio_u
# calculando el precio total de los ingredientes de cada lote
precio_lote_ingredientes <- aggregate(precio ~ lote + receta + dimension_lote + categoria, FUN = sum, data = precio_lote_ingredientes)
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque$precio <- precio_lote_empaque$dimension_lote * precio_lote_empaque$cantidad_productos * precio_lote_empaque$precio_u
# calculando el precio total de los empaques de cada lote
precio_lote_empaque <- aggregate(precio ~ lote + receta + dimension_lote + categoria, FUN = sum, data = precio_lote_empaque)
# uniendo el precio de los ingredientes con los empaques y otros
precio_lote <- precio_lote_ingredientes %<>% rbind(precio_lote_empaque)
precio_lote <- aggregate(precio ~ lote + receta + dimension_lote + categoria, FUN = sum, data = precio_lote)
View(precio_lote)
precio_lote_empaque$cantidad_productos
# empaque y otros
precio_lote_empaque <- precio_articulos_bitacora[!precio_articulos_bitacora$categoria == "ingrediente", ]
precio_lote_empaque$precio_u %<>% as.numeric()
precio_lote_empaque$cantidad_productos
